datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Room {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  description    String?
  lastActivityAt DateTime?
  isActive       Boolean?
  createdBy      String?
  chats          Chat[]
  playlists      Playlist[]
}

model Chat {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  message      String?
  timestamp    DateTime?
  room         Room?     @relation(fields: [roomId], references: [id])
  roomId       String?
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  sentAt       DateTime?
  content      String?
  roomUniqueId String?
  userUniqueId String?
}

model Playlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  movies    Movie[]
}

model Friend {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  friends    Friend[] @relation(name: "FriendOnFriends")
  friend     Friend?  @relation(name: "FriendOnFriends", fields: [friendId], references: [id])
  friendId   String?
}

model Movie {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String?
  description String?
  videoLink   String?
  favorites   Favorite[]
  playlist    Playlist?  @relation(fields: [playlistId], references: [id])
  playlistId  String?
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?
}

model VisitorCounter {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count     Int?
}

model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  firstName    String?
  lastName     String?
  username     String     @unique
  email        String?    @unique
  password     String
  roles        Json
  avatar       Json?
  friendsCount Int?
  chats        Chat[]
  playlists    Playlist[]
  favorites    Favorite[]
  friends      Friend[]
}
