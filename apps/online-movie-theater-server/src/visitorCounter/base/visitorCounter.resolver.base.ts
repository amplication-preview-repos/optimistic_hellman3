/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VisitorCounter } from "./VisitorCounter";
import { VisitorCounterCountArgs } from "./VisitorCounterCountArgs";
import { VisitorCounterFindManyArgs } from "./VisitorCounterFindManyArgs";
import { VisitorCounterFindUniqueArgs } from "./VisitorCounterFindUniqueArgs";
import { CreateVisitorCounterArgs } from "./CreateVisitorCounterArgs";
import { UpdateVisitorCounterArgs } from "./UpdateVisitorCounterArgs";
import { DeleteVisitorCounterArgs } from "./DeleteVisitorCounterArgs";
import { VisitorCounterService } from "../visitorCounter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VisitorCounter)
export class VisitorCounterResolverBase {
  constructor(
    protected readonly service: VisitorCounterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "read",
    possession: "any",
  })
  async _visitorCountersMeta(
    @graphql.Args() args: VisitorCounterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VisitorCounter])
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "read",
    possession: "any",
  })
  async visitorCounters(
    @graphql.Args() args: VisitorCounterFindManyArgs
  ): Promise<VisitorCounter[]> {
    return this.service.visitorCounters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VisitorCounter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "read",
    possession: "own",
  })
  async visitorCounter(
    @graphql.Args() args: VisitorCounterFindUniqueArgs
  ): Promise<VisitorCounter | null> {
    const result = await this.service.visitorCounter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VisitorCounter)
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "create",
    possession: "any",
  })
  async createVisitorCounter(
    @graphql.Args() args: CreateVisitorCounterArgs
  ): Promise<VisitorCounter> {
    return await this.service.createVisitorCounter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VisitorCounter)
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "update",
    possession: "any",
  })
  async updateVisitorCounter(
    @graphql.Args() args: UpdateVisitorCounterArgs
  ): Promise<VisitorCounter | null> {
    try {
      return await this.service.updateVisitorCounter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VisitorCounter)
  @nestAccessControl.UseRoles({
    resource: "VisitorCounter",
    action: "delete",
    possession: "any",
  })
  async deleteVisitorCounter(
    @graphql.Args() args: DeleteVisitorCounterArgs
  ): Promise<VisitorCounter | null> {
    try {
      return await this.service.deleteVisitorCounter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
