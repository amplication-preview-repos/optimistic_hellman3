/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VisitorCounter as PrismaVisitorCounter } from "@prisma/client";

export class VisitorCounterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VisitorCounterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.visitorCounter.count(args);
  }

  async visitorCounters(
    args: Prisma.VisitorCounterFindManyArgs
  ): Promise<PrismaVisitorCounter[]> {
    return this.prisma.visitorCounter.findMany(args);
  }
  async visitorCounter(
    args: Prisma.VisitorCounterFindUniqueArgs
  ): Promise<PrismaVisitorCounter | null> {
    return this.prisma.visitorCounter.findUnique(args);
  }
  async createVisitorCounter(
    args: Prisma.VisitorCounterCreateArgs
  ): Promise<PrismaVisitorCounter> {
    return this.prisma.visitorCounter.create(args);
  }
  async updateVisitorCounter(
    args: Prisma.VisitorCounterUpdateArgs
  ): Promise<PrismaVisitorCounter> {
    return this.prisma.visitorCounter.update(args);
  }
  async deleteVisitorCounter(
    args: Prisma.VisitorCounterDeleteArgs
  ): Promise<PrismaVisitorCounter> {
    return this.prisma.visitorCounter.delete(args);
  }
}
