/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  Chat as PrismaChat,
  Playlist as PrismaPlaylist,
  Favorite as PrismaFavorite,
  Friend as PrismaFriend,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async uploadAvatar<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaUser> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "avatar";
    const avatar = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.user.update({
      where: args.where,

      data: {
        avatar: avatar as InputJsonValue,
      },
    });
  }

  async downloadAvatar<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<FileDownload> {
    const { avatar } = await this.prisma.user.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      avatar as unknown as LocalStorageFile
    );
  }

  async deleteAvatar<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<PrismaUser> {
    const { avatar } = await this.prisma.user.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      avatar as unknown as LocalStorageFile
    );

    return await this.prisma.user.update({
      where: args.where,

      data: {
        avatar: Prisma.DbNull,
      },
    });
  }

  async findChats(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<PrismaChat[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chats(args);
  }

  async findPlaylists(
    parentId: string,
    args: Prisma.PlaylistFindManyArgs
  ): Promise<PrismaPlaylist[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playlists(args);
  }

  async findFavorites(
    parentId: string,
    args: Prisma.FavoriteFindManyArgs
  ): Promise<PrismaFavorite[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .favorites(args);
  }

  async findFriends(
    parentId: string,
    args: Prisma.FriendFindManyArgs
  ): Promise<PrismaFriend[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .friends(args);
  }
}
