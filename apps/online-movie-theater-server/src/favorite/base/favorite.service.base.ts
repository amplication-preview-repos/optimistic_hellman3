/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Favorite as PrismaFavorite,
  User as PrismaUser,
  Movie as PrismaMovie,
} from "@prisma/client";

export class FavoriteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FavoriteCountArgs, "select">): Promise<number> {
    return this.prisma.favorite.count(args);
  }

  async favorites(
    args: Prisma.FavoriteFindManyArgs
  ): Promise<PrismaFavorite[]> {
    return this.prisma.favorite.findMany(args);
  }
  async favorite(
    args: Prisma.FavoriteFindUniqueArgs
  ): Promise<PrismaFavorite | null> {
    return this.prisma.favorite.findUnique(args);
  }
  async createFavorite(
    args: Prisma.FavoriteCreateArgs
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.create(args);
  }
  async updateFavorite(
    args: Prisma.FavoriteUpdateArgs
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.update(args);
  }
  async deleteFavorite(
    args: Prisma.FavoriteDeleteArgs
  ): Promise<PrismaFavorite> {
    return this.prisma.favorite.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.favorite
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getMovie(parentId: string): Promise<PrismaMovie | null> {
    return this.prisma.favorite
      .findUnique({
        where: { id: parentId },
      })
      .movie();
  }
}
